#!/usr/bin/env bash

#******************************************************************************#
#               SOME SCRIPTS FOR MYSELF, AND WHY NOT FOR YOU TOO !
#
#  Main Developer : David Fischer (david.fischer.ch@gmail.com)
#  Copyright      : Copyright (c) 2009-2013 David Fischer. All rights reserved.
#
#******************************************************************************#
#
# This file is part of David Fischer's pyutils Project.
#
# This project is free software: you can redistribute it and/or modify it under
# the terms of the EUPL v. 1.1 as provided by the European Commission.
# This project is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.
#
# See the European Union Public License for more details.
#
# You should have received a copy of the EUPL General Public License along with
# this project. If not, see he EUPL licence v1.1 is available in 22 languages:
#     22-07-2013, <https://joinup.ec.europa.eu/software/page/eupl/licence-eupl>
#
# Retrieved from https://github.com/davidfischer-ch/logicielsUbuntu.git

. logicielsUbuntuCommon

#lu-gitPullAll()
{
  techo "Ubuntu's Softwares Setup Menu [Packages and Scripts]"
  techo '---------------------------- copyright David Fischer'
  techo ''
  pecho 'Git checkout (may create) and pull (update) all branches from origin'
  pecho ''

  autoInstall git-core git

  yesOrNo $true 'Delete all stale tracking branches under origin'
  if [ $REPLY -eq $true ]; then
    git remote prune origin
  fi

  pecho 'Update (may create) all local branches from origin'
  repo_b=$(git branch | sed 's:\* ::;s: *$::g;s:^ *::g')
  orig_b=$(git branch -r | grep origin | grep -vF '>' | sed 's:origin/::;s: *$::g;s:^ *::g')

  orig_menu=''
  for branch in $orig_b
  do
    orig_menu="$orig_menu$branch $branch "
    if ! echo "$repo_b" | grep -q "$branch"; then
      mecho "Create local branch $branch"
      git checkout -b "$branch" "origin/$branch" || \
        xecho "Cannot create branch $branch, stash or commit your local modifications first"
    fi
    mecho "Update local branch $branch"
    git pull || xecho "Cannot update branch $branch, stash or commit your local modifications first"
  done

  # Branch selection menu
  tmpfile=/tmp/$$
  trap "rm -f '$tmpfile' 2>/dev/null" INT TERM EXIT
  $DIALOG --backtitle 'LogicielsUbuntu - Git pull all' \
          --menu 'Please select a branch to checkout' 0 0 0 \
          $orig_menu 2> $tmpfile

  retval=$?
  branch=$(cat $tmpfile)
  if [ $retval -eq 0 -a "$branch" ]; then
    pecho "Checkout branch $branch"
    git checkout "$branch"
  fi

  yesOrNo $true 'Initialise and update all submodules'
  if [ $REPLY -eq $true ]; then
    git submodule init && git submodule update
  fi

  yesOrNo $true 'Pull master branch of all submodules from origin'
  if [ $REPLY -eq $true ]; then
    git submodule foreach git pull origin master
  fi

  pecho 'Status of all submodules'
  git submodule status
}
